<%

var statButton = request.getParameter('stat');
var instanceValue = request.getParameter('inst');
var taskName = request.getParameter('task');
var userName = request.getParameter('user');
var log = new Log();
var humanTaskTable = "humanTaskInfo";

var selectHumanTaskQuery = "Select distinct taskName from "+humanTaskTable+" order by taskName";
var packageResults = QueryResults(selectHumanTaskQuery);

var selectUserNames = "Select distinct taskOwner from "+humanTaskTable+" order by taskOwner";
var userNameResults = QueryResults(selectUserNames);

// get data from the embedded h2 database in BAM
function QueryResults(q){
        
        var result;
        try{
            var db = new Database("WSO2BAM_DATASOURCE");
            result = db.query(q);
        }
        catch(e){
            result=null;
            //print(e);
        }
        finally{
            db.close();
        }
        return result;
}
   
// displaying human task with task name and # of instances
function getHumanTaskList(results)
{
    
    print("<table class='table table-bordere' style='width:96%; margin-left:20px; empty-cells:hide; border-collapse: collapse'>");        
    print("<thead><tr><th>Task Name</th><th class='text-center'>Total Instances</th></tr></thead><tbody>")

    for (var k in results){

        var selectTaskCountQuery = "Select Count(taskId) as count from "+humanTaskTable+" where taskName='"+results[k]["TASKNAME"]+"' and eventType='CREATE'";
        var countResults = QueryResults(selectTaskCountQuery);      
        results[k]["COUNT"] = countResults[0]["COUNT"];   
    }

    if(results==null)
    {
         var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");                                                                    
         print("</tr>");
    }
    else
    {
        if(results.length == 0)
        {
        var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");                                                                    
         print("</tr>");
        }
        else
        {
          for (var k in results){
         print("<tr>");
         print("<td>"+results[k]["TASKNAME"]+"</td>");
         print("<td class='text-center'>"+results[k]["COUNT"]+"</td>");                                                                   
         print("</tr>");
           }
        }     
    }
            
    print("</tbody></table>");
}

// setting task names in drop down menu
function getTaskNames(results)
{
    if(taskName=="All")
    {
      print("<option value='human_info.jag?stat=Taskl&task=All' selected>All</option>");

     for (var k in results){
        print("<option value='human_info.jag?stat=Task&task="+results[k]["TASKNAME"]+"'>"+results[k]["TASKNAME"]+"</option>");
     }

    }
    else
    {
       print("<option value='human_info.jag?stat=Task&task=All'>All</option>");

      for (var k in results)
      {
        var tName = results[k]["TASKNAME"];

        if(taskName==tName)
        {
           print("<option value='human_info.jag?stat=Task&task="+tName+"' selected>"+tName+"</option>");
        }
        else
        {
           print("<option value='human_info.jag?stat=Task&task="+tName+"'>"+tName+"</option>");
        }
      }
    }   

}
    
// setting data for pie chart
function getPieChart(instances)
{
  var totalInstances = "<b>"+instances.length+"</b>";
  var avgRespondTime = "<b>"+calculateAvgRespondTime(getHumanTaskData(taskName,1))+"</b>";
  var avgCompletedTime = "<b>"+calculateAvgCompletionTime(getHumanTaskData(taskName,0))+"</b>"
 
  print("<h5 style='margin-left:20px'>Total Instances : "+totalInstances+"</h5>");
  print("<h5 style='margin-left:20px'>Average Response Time : "+avgRespondTime+"</h5>");
  print("<h5 style='margin-left:20px'>Average Completion Time : "+avgCompletedTime+"</h5>");
  print("<div id='piechart_3d' style='width: 1000px; height: 600px;'></div>");
  print("<h3 style='background-color:lightblue;'>Instances Related Information</h3>");
}

// calculate average respond time for instances
function calculateAvgRespondTime(instances)
{
  var respondTime = "N/A";
  var responseTime = 0;
  var instCount = 0;

    for (var k in instances){

        if(instances[k]["COUNTVALUE"]=="one")
        {
          var timeDidd = (instances[k]["MODIFIEDDATE"]/1000) - convertToUTC(instances[k]["TASKCREATEDTIME"]);
          responseTime += timeDidd;
          instCount++;        
        }        
    }  

    if(responseTime!=0)
    {
      respondTime = getDateTime(responseTime/instCount);
    }

  return respondTime;
}

// calculate average completion of a instance
function calculateAvgCompletionTime(instances)
{
    var instCount = 0;
    var completedTime = "N/A";
    var responseTime =0;

    for (var k in instances){

        if(instances[k]["TASKSTATUS"]=="COMPLETED")
        {
          var timeDidd = (instances[k]["MODIFIEDDATE"]/1000) - convertToUTC(instances[k]["TASKCREATEDTIME"]);
          responseTime += timeDidd;
          instCount++;      
        }        
    }

     if(responseTime!=0)
    {
      completedTime = getDateTime(responseTime/instCount);
    }

    return completedTime;
}

// setting instance count for pie chart
function getStates(instances)
{
 var reserved=0;
 var inprogress=0;
 var completed=0;
 var ready=0;
 var suspended=0;
 var failed = 0;

   for(var k in instances)
  {
  if(instances[k]["TASKSTATUS"]=="RESERVED")
  {
    reserved++;
  }
  else if(instances[k]["TASKSTATUS"]=="IN_PROGRESS")
  {
    inprogress++;

  }else if(instances[k]["TASKSTATUS"]=="COMPLETED")
  {
    completed++;

  }else if(instances[k]["TASKSTATUS"]=="READY")
  {
    ready++;

  }else if(instances[k]["TASKSTATUS"]=="SUSPENDED")
  {
    suspended++;
  }
  else if(instances[k]["TASKSTATUS"]=="FAILED")
  {
    failed++;
   }
  }

 print("['Status', 'Instance Count'],"+'\n');
 print("['Reserved - "+reserved+"',     "+reserved+"],"+'\n');
 print("['Failed - "+failed+"',     "+failed+"],"+'\n');
 print("['Suspended - "+suspended+"',     "+suspended+"],"+'\n');
 print("['Completed - "+completed+"',     "+completed+"],"+'\n');
 print("['In_Progress - "+inprogress+"',     "+inprogress+"],"+'\n');
 print("['Ready - "+ready+"',  "+ready+"]");

}

// displaying task id,task subject,status,created time,completion time and the owner
function getInstances(results)
{

    print("<table class='table table-bordere' style='width:96%; margin-left:20px; empty-cells:hide; border-collapse: collapse'>");        
    print("<thead><tr><th>Task Id</th><th class='text-center'>Subject</th><th class='text-center'>Status</th><th class='text-center'>Created Date</th><th class='text-center'>Task Completion Time</th><th class='text-center'>Participants</th></tr></thead><tbody>")


    if(results.length == 0)
    {
        var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");
         print("<td></td>");
         print("<td></td>");
         print("<td></td>");                                                                     
         print("</tr>");
    }
    else
    {
        for (var k in results){

         var taskStatus = results[k]["TASKSTATUS"];
         var stateData="<font color='"+getFontColour(taskStatus)+"'>"+taskStatus+"</font>";
         var completionTime = "N/A";
         var taskCreatedTime = results[k]["TASKCREATEDTIME"];
         var tOwner = results[k]["TASKOWNER"];

         if(taskStatus == "COMPLETED"){
            completionTime = getTimeDiff(taskCreatedTime,results[k]["MODIFIEDDATE"]);
         }

         if(tOwner==null)
         {
           tOwner="N/A";
         }

         print("<tr>");
         print("<td>"+results[k]["TASKID"]+"</td>");
         print("<td>"+results[k]["TASKSUBJECT"]+"</td>");
         print("<td>"+stateData+"</td>");
         print("<td align='center'>"+taskCreatedTime+"</td>");
         print("<td align='center'>"+completionTime+"</td>");
         print("<td align='center'>"+tOwner+"</td>");                                                                     
         print("</tr>");
        }
    }


    print("</tbody></table>");
}

// return font colour for task status
function getFontColour(state)
{

  var colour="black";

  if(state=="RESERVED")
  {
    colour="blue";
  }
  else if(state=="COMPLETED")
  {
    colour="green";
  }
  else if(state=="FAILED")
  {
    colour="red";
  }
  else if(state=="SUSPENDED")
  {
    colour="orange";
  }
  else if(state=="IN_PROGRESS")
  {
    colour="purple";
  }
  else if(state=="READY")
  {
    colour="black";
  }

  return colour;

}

// setting up clear button in the drop down according to the stat button
function getClearButton(type)
{
  if(type=="Task")
  {
     print("<button onClick=\"window.location.href='human_info.jag?stat=Task&task=All'\" id='clearSelectionBtn1' class='btn btn-primary btn-small pull-right filter-btn'>Clear</button>");
  }
  else
  {
     print("<button onClick=\"window.location.href='human_info.jag?stat=User&user=All'\" id='clearSelectionBtn1' class='btn btn-primary btn-small pull-right filter-btn'>Clear</button>");
  }
 
}

// setting up the stat button according to the input Task and User
function getStatButton(stat)
{

  if(stat == "Task")
  {
      print("<button onClick=\"window.location.href='human_info.jag?stat=Task&task=All'\"  class='btn btn-primary'>Task Related Stats</button><button onClick=\"window.location.href='human_info.jag?stat=User&user=All'\" class='btn'>Per User Stats</button>");
  }
  else
  {
       print("<button onClick=\"window.location.href='human_info.jag?stat=Task&task=All'\"  class='btn'>Task Related Stats</button><button onClick=\"window.location.href='human_info.jag?stat=User&user=All'\" class='btn btn-primary'>Per User Stats</button>");
  }

}

// getting instance data according to the type 0 and 1
function getHumanTaskData(taskN,type)
{
   var selectDistinctTasksQuery = "Select * from "+humanTaskTable+" where taskName='"+taskN+"' and taskStatus='RESERVED' order by taskCreatedTime";
   var distinctTasks = QueryResults(selectDistinctTasksQuery);

   var selectNonReservedTasksQuery = "Select taskId,taskStatus,modifiedDate,taskOwner from "+humanTaskTable+" where taskName='"+taskN+"' and taskStatus!='RESERVED' order by modifiedDate";
   var nonReservedTasks = QueryResults(selectNonReservedTasksQuery);
 
 // Use for current status calculation
   if(type==0)
   {
    for (var k in distinctTasks)
    {
      for (var k2 in nonReservedTasks){
       
       if(distinctTasks[k]["TASKID"]==nonReservedTasks[k2]["TASKID"])
       {
          distinctTasks[k]["TASKSTATUS"]=nonReservedTasks[k2]["TASKSTATUS"];
          distinctTasks[k]["MODIFIEDDATE"]=nonReservedTasks[k2]["MODIFIEDDATE"];
          distinctTasks[k]["TASKOWNER"] = nonReservedTasks[k2]["TASKOWNER"];
       }

      }

    }

   }
   else if(type == 1)
   {
      //For Average Response Time calculation
    for (var k in distinctTasks)
    {
     
      for (var k2 in nonReservedTasks){
       
       if(distinctTasks[k]["TASKID"]==nonReservedTasks[k2]["TASKID"])
       {
          
          if(distinctTasks[k]["COUNTVALUE"]==null)
          {
            distinctTasks[k]["TASKSTATUS"]=nonReservedTasks[k2]["TASKSTATUS"];
            distinctTasks[k]["MODIFIEDDATE"]=nonReservedTasks[k2]["MODIFIEDDATE"];
            distinctTasks[k]["COUNTVALUE"]="one";
          }
          
       }

      }

    }
   
    }
    return distinctTasks;

}

// return the time difference accoding to the format days, hours, mintues and seconds
function getTimeDiff(startT,endT)
{
    return getDateTime((endT/1000)-convertToUTC(startT));
}

// convert Normal time format in to Utc time
function convertToUTC(time)
{  
    var timeValues = time.split(" ");
    var month = getMonthValue(timeValues[1])-1;
    var year = timeValues[5];
    var date = timeValues[2];

    var hourValues = timeValues[3].split(":");

    var setTime = new Date(year,month,date,hourValues[0],hourValues[1],hourValues[2]);
    var utcTime = setTime.getTime()/1000;

    return utcTime;
}

// convert UTC time to Days, Hours, Minutes and Seconds
function getDateTime(t){

  return parseInt(t/86400)+'d '+(new Date(t%86400*1000)).toUTCString().replace(/.*(\d{2}):(\d{2}):(\d{2}).*/, "$1h $2m $3s");
}

// get month value which has month name in three words
function getMonthValue(month)
{
   var monthValue=1;

   if(month=="Jan")
   {
      monthValue = 1;

   }else if(month=="Feb")
   {
      monthValue = 2;

   }else if(month=="Mar")
   {
      monthValue = 3;
      
   }else if(month=="Apr")
   {
      monthValue = 4;
      
   }else if(month=="May")
   {
      monthValue = 5;
      
   }else if(month=="Jun")
   {
      monthValue = 6;
      
   }else if(month=="Jul")
   {
      monthValue = 7;
      
   }else if(month=="Aug")
   {
      monthValue = 8;
      
   }else if(month=="Sep")
   {
      monthValue = 9;
      
   }else if(month=="Oct")
   {
      monthValue = 10;
      
   }else if(month=="Nov")
   {
      monthValue = 11;
      
   }else if(month=="Dec")
   {
      monthValue = 12;
      
   }

   return monthValue;
}

// change drop down key word according to the stat button
function changeTaskUser(type)
{

  if(type == "Task")
  {
    print("<span class='span3'>Select Task Name :<select id='taskName-dd' name='basic-combo' onChange=\"window.location.href=this.value\">");
    getTaskNames(packageResults);
    print("</select></span>");
  }
  else
  {
    print("<span class='span3'>Select User :<select id='taskName-dd' name='basic-combo' onChange=\"window.location.href=this.value\">");
    getUserNames(userNameResults);
    print("</select></span>");
  }

}

// set username for the drop down menu
function getUserNames(results)
{

    if(userName=="All")
    {
      print("<option value='human_info.jag?stat=User&user=All' selected>All</option>");

     for (var k in results){

      var owner = results[k]["TASKOWNER"];

      if(owner!=null)
      {
        print("<option value='human_info.jag?stat=User&user="+owner+"'>"+owner+"</option>");
      }
        
     }

    }
    else
    {
       print("<option value='human_info.jag?stat=User&user=All'>All</option>");

      for (var k in results)
      {
        var tName = results[k]["TASKOWNER"];

        if(tName!=null)
        {
          if(userName==tName)
        {
           print("<option value='human_info.jag?stat=User&user="+tName+"' selected>"+tName+"</option>");
        }
        else
        {
           print("<option value='human_info.jag?stat=User&user="+tName+"'>"+tName+"</option>");
        }

        }

      }

    }

}

// change titles according to the stat button value
function changeTitles(type)
{
    if(type=="Task")
    {
      print("<h3 style='background-color:lightblue;'>Task Related Information</h3>");
    }
    else
    {
      print("<h3 style='background-color:lightblue;'>User Related Information</h3>");
    }
}

// get user data for specific user
function getUserData(user,type)
{

   var selectDistinctUserTasksQuery = "Select * from "+humanTaskTable+" where taskOwner='"+user+"' and taskStatus='RESERVED' order by taskCreatedTime";
   var distinctTasks = QueryResults(selectDistinctUserTasksQuery);

   var selectNonReservedUserTasksQuery = "Select taskId,taskStatus,modifiedDate,taskOwner from "+humanTaskTable+" where taskOwner='"+user+"' and taskStatus!='RESERVED' order by modifiedDate";
   var nonReservedTasks = QueryResults(selectNonReservedUserTasksQuery);

   if(type == 0)
   {
      for (var k in distinctTasks)
      {     
        for (var k2 in nonReservedTasks){
       
       if(distinctTasks[k]["TASKID"]==nonReservedTasks[k2]["TASKID"])
       {
          distinctTasks[k]["TASKSTATUS"]=nonReservedTasks[k2]["TASKSTATUS"];
          distinctTasks[k]["MODIFIEDDATE"]=nonReservedTasks[k2]["MODIFIEDDATE"];
          distinctTasks[k]["TASKOWNER"] = nonReservedTasks[k2]["TASKOWNER"];
       }

      }

    }

   }
   else if(type == 1)
   {

    //For Average Response Time calculation
    for (var k in distinctTasks)
    {     
      for (var k2 in nonReservedTasks){
       
       if(distinctTasks[k]["TASKID"]==nonReservedTasks[k2]["TASKID"])
       {
         if(distinctTasks[k]["COUNTVALUE"]==null)
          {
            distinctTasks[k]["TASKSTATUS"]=nonReservedTasks[k2]["TASKSTATUS"];
            distinctTasks[k]["MODIFIEDDATE"]=nonReservedTasks[k2]["MODIFIEDDATE"];
            distinctTasks[k]["COUNTVALUE"]="one";
          }
          
       }

      }

    }

   }

   return distinctTasks;
}

// displaying user related data such as total task,completed tasks,inprogress tasks,etc.
function setUsersData(userList)
{

  print("<table class='table table-bordere' style='width:96%; margin-left:20px; empty-cells:hide; border-collapse: collapse'>");
  print("<thead><tr><th>User</th><th class='text-center'>Total Tasks</th><th class='text-center'>Completed Tasks</th><th class='text-center'>In_Progress Tasks</th><th class='text-center'>Average Response Time</th></tr></thead><tbody>")

    if(userList==null)
    {
        var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td></td>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");
         print("<td></td>");                                                                    
         print("</tr>");
    }
    else
    {

           if(userList.length == 0)
       {
        var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");
         print("<td></td>");
         print("<td></td>");                                                                    
         print("</tr>");
      }
       else
     {
        for (var k in userList){

      var user = userList[k]["TASKOWNER"];

      if(user!=null)
      {
        var userData = getUserData(user,0);

         print("<tr>");
         print("<td>"+user+"</td>");
         print("<td align='center'>"+userData.length+"</td>");

         var counter = 0;

         for (var k2 in userData){

          if(userData[k2]["TASKSTATUS"]=="COMPLETED")
          {
            counter++;
          }

         }

         var inprogressTasks = userData.length - counter;
         var userAvgData = getUserData(user,1);      
         var avgValue = calculateAvgRespondTime(userAvgData);

         print("<td align='center'>"+counter+"</td>");  
         print("<td align='center'>"+inprogressTasks+"</td>");  
         print("<td align='center'>"+avgValue+"</td>");
         print("</tr>");

        
      }

        }
    
    }

    }

   
               

    print("</tbody></table>");

}

// displaying user specific tasks
function setUserSpecificData(user)
{

    var results = getUserData(user,0);

    print("<table class='table table-bordere' style='width:96%; margin-left:20px; empty-cells:hide; border-collapse: collapse'>");        
    print("<thead><tr><th>Task Id</th><th class='text-center'>Subject</th><th class='text-center'>Status</th><th class='text-center'>Created Date</th><th class='text-center'>Task Completion Time</th></tr></thead><tbody>")

    if(results.length == 0)
    {
        var dataNotAvailable = "<font color='red'>No data Found!</font>";

         print("<tr>");
         print("<td></td>");
         print("<td></td>");
         print("<td style='line-height:250px'>"+dataNotAvailable+"</td>");
         print("<td></td>");
         print("<td></td>");                                                                     
         print("</tr>");
    }
    else
    {
        for (var k in results){

         var taskStatus = results[k]["TASKSTATUS"];
         var stateData="<font color='"+getFontColour(taskStatus)+"'>"+taskStatus+"</font>";
         var completionTime = "N/A";
         var taskCreatedTime = results[k]["TASKCREATEDTIME"];

         if(taskStatus == "COMPLETED"){
            completionTime = getTimeDiff(taskCreatedTime,results[k]["MODIFIEDDATE"]);
         }
         print("<tr>");
         print("<td>"+results[k]["TASKID"]+"</td>");
         print("<td>"+results[k]["TASKSUBJECT"]+"</td>");
         print("<td>"+stateData+"</td>");
         print("<td align='center'>"+taskCreatedTime+"</td>");
         print("<td align='center'>"+completionTime+"</td>");                                                                    
         print("</tr>");
        }
    }           
    print("</tbody></table>");


}

%>


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">

<link rel="stylesheet" type="text/css" href="../../resources/css/bootstrap.css" />
<script src="../../resources/js/vendor/jquery-1.10.1.min.js"></script>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
      google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
               

        var data = google.visualization.arrayToDataTable([
         <% getStates(getHumanTaskData(taskName,0)); %>
        ]);

        var options = {
          title: 'Instances by Task Status',
          is3D: true,
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart_3d'));
        chart.draw(data, options);
      }
    </script>
</head>
<body>  
                <div class="container" style="max-width:1200px">
                   <div class="row">
                        <div class="col-lg-12" style="padding-left:0px">
                            <div class="navbar timelySwitch pull-left" style="overflow: hidden;">
                                      <div id="hprocess-dd">
                                        <% getStatButton(statButton);  %>
                                      </div>
                                  </div>
                        </div>
                    </div>
                </div>

                    <% changeTitles(statButton); %>
                            
                <div class="container" style="max-width:1200px">           
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="well topFilteringPanel">
                            <% changeTaskUser(statButton); %>
                                      
                               
                               <% getClearButton(statButton); %>
                            </div>
                        </div>
                    </div>
                </div>


        <% 
              if(statButton=="Task")
              {
                if(taskName=="All")
                {
                    getHumanTaskList(packageResults);

                }else
                {
                    var humanTaskResults = getHumanTaskData(taskName,0);
                    getPieChart(humanTaskResults);
                    getInstances(humanTaskResults);
                }

              }else
              {
                  if(userName == "All")
                  {
                    setUsersData(userNameResults);
                  }
                  else
                  {
                    setUserSpecificData(userName);
                  }

              }                
                
        %>
 
<div id="errorInfo"></div>


<style type="text/css">
body{
font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
background-color: white;
}
#bar-chart-simple{
  width:94%;
}
</style>
<script src="../../resources/js/vendor/bootstrap.min.js"></script>


</body>
</html>